// Copyright Â© 2024 KubeStack-AI Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package models

import "time"

// ExecutionStrategy defines how the steps in a plan should be executed.
type ExecutionStrategy string

const (
	SerialExecution   ExecutionStrategy = "serial"
	ParallelExecution ExecutionStrategy = "parallel"
)

// ExecutionPlan is a detailed, ordered list of steps to be executed to resolve an issue.
// It is generated by the ExecutionPlanner and reviewed by the user before execution.
type ExecutionPlan struct {
	ID           string            `json:"id" yaml:"id"`
	Strategy     ExecutionStrategy `json:"strategy" yaml:"strategy"`
	Steps        []*ExecutionStep  `json:"steps" yaml:"steps"`
	Risk         *RiskAssessment   `json:"risk,omitempty" yaml:"risk,omitempty"`
	RollbackPlan *RollbackPlan     `json:"rollbackPlan,omitempty" yaml:"rollbackPlan,omitempty"`
}

// ExecutionStep represents a single, atomic action within an execution plan.
// Its status can be updated in real-time during execution.
type ExecutionStep struct {
	ID          string   `json:"id" yaml:"id"`
	Name        string   `json:"name" yaml:"name"`
	Description string   `json:"description" yaml:"description"`
	Action      *FixAction `json:"action" yaml:"action"` // The concrete action to perform.
	DependsOn   []string `json:"dependsOn,omitempty" yaml:"dependsOn,omitempty"` // IDs of steps that must complete first.
	Status      string   `json:"status" yaml:"status"` // e.g., "Pending", "Running", "Success", "Failed", "Skipped".
	Result      string   `json:"result,omitempty" yaml:"result,omitempty"` // A summary of the output or result of the step.
}

// ExecutionResult contains the overall outcome and detailed logs of an execution plan.
type ExecutionResult struct {
	PlanID      string           `json:"planId" yaml:"planId"`
	Status      string           `json:"status" yaml:"status"` // e.g., "Success", "Failed", "PartialSuccess".
	StartTime   time.Time        `json:"startTime" yaml:"startTime"`
	EndTime     time.Time        `json:"endTime" yaml:"endTime"`
	StepResults []*ExecutionStep `json:"stepResults" yaml:"stepResults"`
	Logs        []*ExecutionLog  `json:"logs,omitempty" yaml:"logs,omitempty"`
}

// RiskAssessment contains the analysis of potential risks for an operation.
type RiskAssessment struct {
	Level       string   `json:"level" yaml:"level"` // e.g., "Low", "Medium", "High", "Critical".
	Description string   `json:"description" yaml:"description"`
	Impacts     []string `json:"impacts,omitempty" yaml:"impacts,omitempty"` // A list of potential negative impacts.
}

// RollbackPlan defines the strategy and steps required for reverting a failed execution.
type RollbackPlan struct {
	Strategy string           `json:"strategy" yaml:"strategy"` // e.g., "Automatic", "Manual".
	Steps    []*ExecutionStep `json:"steps" yaml:"steps"`
}

// ExecutionLog records a single log entry during the execution of a plan.
type ExecutionLog struct {
	Timestamp time.Time `json:"timestamp" yaml:"timestamp"`
	StepID    string    `json:"stepId,omitempty" yaml:"stepId,omitempty"`
	Message   string    `json:"message" yaml:"message"`
	Level     string    `json:"level" yaml:"level"` // e.g., "Info", "Warn", "Error".
}

// ExecutionMetrics contains performance metrics for the execution process.
type ExecutionMetrics struct {
	TotalDuration time.Duration            `json:"totalDuration" yaml:"totalDuration"`
	StepDurations map[string]time.Duration `json:"stepDurations,omitempty" yaml:"stepDurations,omitempty"`
}

// ConfigChange represents a structured configuration change to be applied to a file.
type ConfigChange struct {
	File  string `json:"file" yaml:"file"`
	Key   string `json:"key" yaml:"key"`
	Value string `json:"value" yaml:"value"`
}

//Personal.AI order the ending
